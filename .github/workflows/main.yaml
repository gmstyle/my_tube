name: Flutter Android Build and Release

on:
  push:
    branches:
      - main # Esegui questo workflow quando si fa un push su 'main'
  pull_request:
    branches:
      - main # Esegui questo workflow quando si apre una PR su 'main'
    types: [opened, synchronize, reopened] # Per attivare su apertura, aggiornamento o riapertura PR

permissions:
  contents: write # Questo dar√† al GITHUB_TOKEN i permessi di scrittura sui contenuti del repository, inclusi release e tag.

jobs:
  build_and_release:
    runs-on: ubuntu-latest # Useremo un runner Linux per il build Android
    environment: production # Usa l'environment production per i secrets

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # Questo √® importante per creare tag e release!
          # Richiede un token con permessi di scrittura sui contenuti del repository.
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          #flutter-version: '3.19.6' # Sostituisci con la versione specifica di Flutter che usi (es. 3.19.6, 3.22.0, etc.)
          channel: stable # o beta/master se usi un canale diverso

      - name: Get Dependencies
        run: flutter pub get

      - name: Setup Android Keystore for Release
        # Questo step configura il keystore per la firma di release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Crea il file keystore dal secret base64
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/upload-keystore.jks
          
          # Crea il file key.properties con i dati dal secret
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=upload-keystore.jks" >> android/key.properties

      - name: Analyze Code
        run: flutter analyze

      # - name: Run Tests
      #   run: flutter test

      - name: Get App Version
        id: get_version
        run: |
          # Estrai la versione dal pubspec.yaml
          # Esempio: version: 1.0.0+1
          # Otteniamo "1.0.0" come APP_VERSION e "1" come BUILD_NUMBER (se presente)
          VERSION=$(grep '^version:' pubspec.yaml | awk '{print $2}')
          APP_VERSION=$(echo $VERSION | cut -d'+' -f1)
          BUILD_NUMBER=$(echo $VERSION | cut -d'+' -f2)

          if [ -z "$BUILD_NUMBER" ]; then
            BUILD_NUMBER="0" # Valore di default se non c'√® build number
          fi

          # Per ora, usiamo la versione dal pubspec.yaml
          echo "APP_VERSION=$APP_VERSION" >> "$GITHUB_OUTPUT"
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Generate Release Notes
        id: release_notes
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Ottieni l'ultimo tag di release per confrontare le modifiche
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            # Se non ci sono tag precedenti, prendi tutti i commit dell'ultimo mese
            COMMITS=$(git log --since="1 month ago" --pretty=format:"- %s (%an)" --no-merges)
            echo "CHANGELOG<<EOF" >> "$GITHUB_OUTPUT"
            echo "## üéâ Prima Release" >> "$GITHUB_OUTPUT"
            echo "" >> "$GITHUB_OUTPUT"
            echo "### üìù Commit principali:" >> "$GITHUB_OUTPUT"
            echo "$COMMITS" >> "$GITHUB_OUTPUT"
            echo "EOF" >> "$GITHUB_OUTPUT"
          else
            # Ottieni i commit dal last tag ad ora
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%an)" --no-merges)
            
            # Separa i commit per tipo
            FEATURES=$(echo "$COMMITS" | grep -i "feat\|add\|new" || echo "")
            FIXES=$(echo "$COMMITS" | grep -i "fix\|bug\|patch" || echo "")
            IMPROVEMENTS=$(echo "$COMMITS" | grep -i "improve\|update\|enhance\|refactor" || echo "")
            OTHERS=$(echo "$COMMITS" | grep -v -i "feat\|add\|new\|fix\|bug\|patch\|improve\|update\|enhance\|refactor" || echo "")
            
            echo "CHANGELOG<<EOF" >> "$GITHUB_OUTPUT"
            echo "## üöÄ Cosa c'√® di nuovo" >> "$GITHUB_OUTPUT"
            echo "" >> "$GITHUB_OUTPUT"
            
            if [ ! -z "$FEATURES" ]; then
              echo "### ‚ú® Nuove Funzionalit√†" >> "$GITHUB_OUTPUT"
              echo "$FEATURES" >> "$GITHUB_OUTPUT"
              echo "" >> "$GITHUB_OUTPUT"
            fi
            
            if [ ! -z "$FIXES" ]; then
              echo "### üêõ Bug Fix" >> "$GITHUB_OUTPUT"
              echo "$FIXES" >> "$GITHUB_OUTPUT"
              echo "" >> "$GITHUB_OUTPUT"
            fi
            
            if [ ! -z "$IMPROVEMENTS" ]; then
              echo "### üîß Miglioramenti" >> "$GITHUB_OUTPUT"
              echo "$IMPROVEMENTS" >> "$GITHUB_OUTPUT"
              echo "" >> "$GITHUB_OUTPUT"
            fi
            
            if [ ! -z "$OTHERS" ]; then
              echo "### üìù Altri Cambiamenti" >> "$GITHUB_OUTPUT"
              echo "$OTHERS" >> "$GITHUB_OUTPUT"
              echo "" >> "$GITHUB_OUTPUT"
            fi
            echo "EOF" >> "$GITHUB_OUTPUT"
          fi

      - name: Build Android Release APK
        # Questo step viene eseguito solo quando si fa un push sul branch 'main'
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          flutter build apk --release \
            --build-name=${{ steps.get_version.outputs.APP_VERSION }} \
            --build-number=${{ steps.get_version.outputs.BUILD_NUMBER }}

      - name: Rename APK with version
        # Rinomina l'APK includendo la versione nel nome del file
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          mv build/app/outputs/flutter-apk/app-release.apk \
             build/app/outputs/flutter-apk/app-release-${{ steps.get_version.outputs.APP_VERSION }}.apk

      - name: Upload Android APK as Artifact
        # Questo step viene eseguito solo quando si fa un push sul branch 'main'
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: app-release-${{ steps.get_version.outputs.APP_VERSION }}-apk
          path: build/app/outputs/flutter-apk/app-release-${{ steps.get_version.outputs.APP_VERSION }}.apk

      - name: Create Git Tag and GitHub Release
        # Questo step viene eseguito solo quando si fa un push sul branch 'main'
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          # Il tag sar√† v<versione_app> (es. v1.0.0)
          tag_name: v${{ steps.get_version.outputs.APP_VERSION }}+${{ steps.get_version.outputs.BUILD_NUMBER }}
          name: Release v${{ steps.get_version.outputs.APP_VERSION }} (${{ steps.get_version.outputs.BUILD_NUMBER }})
          body: |
            # My Tube v${{ steps.get_version.outputs.APP_VERSION }}
            
            **Versione:** ${{ steps.get_version.outputs.APP_VERSION }}  
            **Build:** ${{ steps.get_version.outputs.BUILD_NUMBER }}  
            **Data:** ${{ github.event.head_commit.timestamp }}
            
            ---
            
            ${{ steps.release_notes.outputs.CHANGELOG }}
            
            ---
            
            ## üì± Download
            Scarica l'APK qui sotto per installare My Tube sul tuo dispositivo Android.
            
            ## üîß Installazione
            1. Scarica il file APK
            2. Abilita "Sorgenti sconosciute" nelle impostazioni Android
            3. Installa l'APK
            
            ## üêõ Bug Report
            Se riscontri problemi, apri una [issue](https://github.com/${{ github.repository }}/issues) su GitHub.
          draft: false # Metti a true se vuoi che la release sia una bozza all'inizio
          prerelease: false # Metti a true se √® una pre-release (es. beta)
          files: build/app/outputs/flutter-apk/app-release-${{ steps.get_version.outputs.APP_VERSION }}.apk # Allega l'APK alla release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Necessario per creare la release